sql:

sql commands:
--------------

ddl = data definition language
create , alter , drop , truncate

dml = data manipulation language
select , update , insert , delete

dcl = data Control language
grant , revoke

tcl = Transaction Control language
commit , rollback

datatypes in sql:
-----------------
binary: images

numeric:
approximation : real , float
exact : bit , tinyint , smallint , int , Bigint , decimal

strings: char, varchar , text

data & time:
data : yyyymmdd
time : hhmmss
data & time : yyyymmddhhmmss

commands:
-----------

create database vicky; --> database creation
show databases; -->shows all databases
use database_name;
show tables;
create table student(std_id integer,std_name varchar(30),std_branch varchar(20),std_perc float);
desc table_name -->sigma of table


insert command:
---------------
dml command
used to insert the data into tables
insert into table_name (att1,att2---) values(att1,att2,---); -->command
if the data is string that should be enclosed by ' '
insert into student(sid,sname) values(101,'sundeep');
by default all the remaining values in the row which are not declared in the command are "NULL"
if all values are giving than dont need to give the table(att1,attr2) jst give table_name and directly givve values
by using comma ',' in the end of the command and we can give the multiple rows in the single command

constraints: rules
------------

primary key : no null & no duplicates

no null :  
the user cant leave the attribute as NULL

check :

default :
we give default value there so if the value is not given then the default value is taken

unique :

foreign key :

create table student(
sid integer,
sname varchar(30),
branch varchar(30),
age integer,
college varchar(30) default 'BEC', -->if the value is not given then the default value is assigned
perc float not null, --> perc cant be blank or null as we give "no null"
contact integer unique, -->accepts if the value is unique only
primary key(sid), -->sid acts as the primary key for the given table
check age>18, -->cheks the age value while the age is ok with the condition then only the value is assigned
foreign key(cid) refernces course(cid), -->primary key of another table is the foreign key of these table as we give refernce table_name(attribute)
);

create table course(
cid integer,
cname varchar(30),
branch varchar(30),
primary key(cid),
);

alter command:
--------------
ddl command
to change the schema of the database
addcolumn
delete col
modify datatype of existing col
set constraints like not null,primary key,unique key etc..
remove constraints


create table student(
sid integer,
sname varchar(30),

);

alter table table_name add col_name data_type;

drop col:
alter table table_name drop column col_name

modify datatype:
alter table table_name modify column column_name data_type

add not null:
alter table table_name add modify column_name datatype not null;

add constraint unique:
alter table table_name add constraint unique(col_name);

add primary_key :
alter table table_name add constraint primary key(col_name);

add check:
alter table table_name add constraint check(condition);

drop constraint:
alter table table_name drop constraint_name;

drop constarint unique:
alter table table_name drop index col_name;

drop command:
---------------
ddl command
delete entire table

drop table table_name

truncate command:
-----------------
ddl command
deletes the entire values in the table
truncate table table_name;

select command:
-----------------
dml command
used for retrive the data

select * from table_name where condition



update command:
--------------
dml command
used to modify the existing data

update table_name
set column1 = value , column2 = value,
where condition;

delete command:
----------------
used to delete the specific rows from the table based on the condition
dml command
differnet from drop and truncate

delete from table_name
where condition -->specific ros are deleted based on the condition

delete from table_name -->deletes all rows in the table


aggregate functions :
----------------------

count() -->gives count
sum() -->applied for numerical values gives sum of the attributes
avg()  --> average of all values
min() -->gives minimum value
max() -->gives maximum value


groupby:
---------------------
these clauses will be used in the select commmand

groupby used for group the rows based on column
aggregate functions

select * from table_name group by col1,col2;

having :
------------
having is used because we cant use the aggragate functions in the where class
In the having condition we can use aggreagate functions .
having aggregate functions
conditions on result of groupby clause

select * from table_name group by col1, col2 having condition;

ex:
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING max(CustomerID) > 5
ORDER BY COUNT(CustomerID) DESC;

exists:
-------
The EXISTS operator is used to test for the existence of any record in a subquery.

The EXISTS operator returns TRUE if the subquery returns one or more records.

SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);

VIEWS IN MYSQL:
-------------------
virtual table constructed from existing tbale
single multiple
with required attributes
changes made in the table reflexs on view
changes made in view reflexs on coressponding table

create view view_name as 
select col_name1,col_name2 from table where condition;

create view view_name as
select col_name1,col_name2 from table1,table2 
where table1.col_name=table2.col_name and condition;


TASKS:
---------

CREATE TABLE SAILORS(
SID INTEGER ,
SNAME varchar(30) , 
RATING INTEGER,
AGE INTEGER,
PRIMARY KEY(SID));

CREATE TABLE BOATS(
BID INTEGER,
BNAME VARCHAR(30),
COLOR VARCHAR(20),
PRIMARY KEY(BID));

CREATE TABLE RESERVES(
SID INTEGER,
BID INTEGER,
DAY date,
PRIMARY KEY(SID,BID),
foreign KEY(SID) references SAILORS(SID),
foreign KEY(BID) references BOATS(BID));

INSERT INTO SAILORS VALUES
(101,"SUNDEEP",9,25),
(102,"SARADHI",10,27),
(103,"RAAJESH",6,26),
(104,"RAMU",8,25),
(105,"HARI",6,28),
(106,"SIVA",10,30);

INSERT INTO BOATS VALUES
(1,"BOAT1","GREEN"),
(2,"BOAT2","RED"),
(3,"BOAT3","BLUE"),
(4,"BOAT4","BLACK");

INSERT INTO RESERVES VALUES
(101,1,20220110),
(102,1,20220101),
(103,4,20220711),
(104,3,20210221),
(105,2,20220425);
INSERT INTO RESERVES VALUES
(105,1,20220910),
(103,2,20210820);

-- QUERIES 
SELECT SNAME FROM SAILORS,RESERVES where SAILORS.SID=RESERVES.SID AND BID=3;
SELECT SNAME FROM SAILORS,RESERVES,BOATS 
WHERE SAILORS.SID=RESERVES.SID 
AND RESERVES.BID=BOATS.BID
AND BOATS.COLOR="RED";

SELECT COLOR FROM BOATS,SAILORS,RESERVES
WHERE SAILORS.SID=RESERVES.SID
AND RESERVES.BID=BOATS.BID
AND SAILORS.SNAME="SUNDEEP";

SELECT SNAME FROM SAILORS,RESERVES,BOATS
WHERE SAILORS.SID=RESERVES.SID
AND RESERVES.BID=BOATS.BID;
-- SELECT * FROM SAILORS;
-- SELECT * FROM BOATS;
-- SELECT * FROM RESERVES;


normalization:
----------------
process of evaluating and correcting table structure to minimize the data redundancy there by reducing data anomalies
normal form is defined as a set of rules that are framed inorder to convert a realtion into standard form

1nf
remove repaeted values
identify primary key

2nf
satisfies 1nf
no partial dependency: 
group the attributes which are dependent on the primary_key and make table
group the attributes which are not depedent on the primary_key and make table

3nf
satisifies 2nf
no transitive dependency:
group the attributes which are non primary key dependent on another non primary key then those are divided from the table and create the another table

BCNF : boyce code normal form
advanced of 3nf
no transitive dependency no the non primary key attribute and primary attribute
as in the table where contain 2 primary keys and non primary atribute dependends on the single primary key then it is removed
group the primary key (which is not in the dependency ),non primary attributes (which are not dependent on any primary key
group the primary key( which is in the dependency),non primary attribute which are dependent on the single primary key

4nf
satisifies the BCNF
no multi value dependency
as the table contain the non primary attributes more than one are dependent on the primary key then it is know as the multi value dependency
group the primary key and one of the non primary attribute
group the primary key and another primary key

5nf


In the context of a Database Management System (DBMS), ACID properties ensure reliable processing of database transactions. ACID stands for Atomicity, Consistency, Isolation, and Durability. Hereâ€™s a detailed explanation of each property:

### 1. **Atomicity**
Atomicity guarantees that each transaction is treated as a single unit, which either completes in its entirety or does not execute at all. This means if any part of a transaction fails, the entire transaction is rolled back, leaving the database in its previous state. 

**Example:** When transferring money from one bank account to another, the entire transaction includes debiting one account and crediting another. If the debit is successful but the credit fails, the transaction should be rolled back to ensure neither account is incorrectly updated.

### 2. **Consistency**
Consistency ensures that a transaction brings the database from one valid state to another valid state, maintaining the predefined rules and constraints of the database. This means any transaction will not violate the integrity constraints placed on the database.

**Example:** In a database of student records, if there is a rule that the age of a student must be between 5 and 100, any transaction that attempts to insert or update a record with an age outside this range would be rejected to maintain consistency.

### 3. **Isolation**
Isolation ensures that concurrent execution of transactions leaves the database in the same state as if the transactions were executed sequentially. This means that the operations of one transaction are isolated from the operations of other transactions.

**Example:** If two transactions are updating the same record in a database, isolation ensures that the operations are performed in such a way that the final state reflects the sequential execution of these transactions, preventing "dirty reads," "non-repeatable reads," and "phantom reads."

### 4. **Durability**
Durability guarantees that once a transaction has been committed, it remains so, even in the event of a system failure. This is typically achieved through the use of transaction logs and other backup mechanisms.

**Example:** If a transaction to update a customer's address in an e-commerce database is committed, that change should be permanent and recoverable even if the database system crashes immediately after the transaction.

### ACID in Practice
Modern databases implement ACID properties to various extents. Relational databases like MySQL, PostgreSQL, and Oracle are designed with ACID compliance to ensure reliable transactions. However, in distributed or NoSQL databases, strict ACID compliance might be relaxed to achieve higher performance and scalability, often adopting BASE (Basically Available, Soft state, Eventual consistency) properties instead.

### Importance of ACID Properties
- **Reliability:** Ensures that database operations are reliable and predictable.
- **Data Integrity:** Maintains the correctness and validity of the data.
- **Concurrency Control:** Manages simultaneous operations without conflict.
- **System Recovery:** Ensures data permanence and recovery from failures.

In summary, ACID properties are fundamental to ensuring that database transactions are processed reliably, maintaining the integrity and consistency of data even in concurrent and failure-prone environments.
Sure, let's provide an example for each ACID property to illustrate how they work in practice:

### 1. **Atomicity**

**Example:**
Consider a banking system where you need to transfer $100 from Account A to Account B.

- **Transaction Steps:**
  1. Debit $100 from Account A.
  2. Credit $100 to Account B.

**Scenario:**
If there is a system failure after the first step (debit from Account A) but before the second step (credit to Account B), the transaction should be rolled back. This means the $100 should be returned to Account A to ensure atomicity. Either both steps complete successfully, or neither does, preserving the system's state.

### 2. **Consistency**

**Example:**
Consider a student enrollment system with a rule that a student's age must be between 5 and 100 years.

- **Transaction Steps:**
  1. Insert a new student record with an age of 25.

**Scenario:**
If a transaction tries to insert a student with an age of 150, it violates the consistency rule. The DBMS will reject this transaction, ensuring that the database remains in a consistent state where all student records meet the defined constraints.

### 3. **Isolation**

**Example:**
Consider an online shopping system where two customers are trying to purchase the last available item of a product simultaneously.

- **Transaction Steps for Customer 1:**
  1. Check if the item is in stock.
  2. Reduce the stock by 1.
  3. Confirm the purchase.

- **Transaction Steps for Customer 2 (happening concurrently):**
  1. Check if the item is in stock.
  2. Reduce the stock by 1.
  3. Confirm the purchase.

**Scenario:**
Isolation ensures that these transactions are executed in such a way that the final stock count correctly reflects only one item being sold, even though the operations are happening concurrently. The system may use locking mechanisms to ensure one transaction completes before the other begins, preventing conflicts.

### 4. **Durability**

**Example:**
Consider an e-commerce system where a customer places an order, and the system needs to record this order in the database.

- **Transaction Steps:**
  1. Create a new order record in the orders table.
  2. Reduce the stock of the ordered item.
  3. Confirm the order and send a confirmation email to the customer.

**Scenario:**
Once this transaction is committed, the changes must persist even if the system crashes immediately afterward. This means that the new order record and the updated stock count should be permanently saved and retrievable after the system restarts, ensuring durability.

In summary, these examples demonstrate how each ACID property ensures robust and reliable transaction processing in a DBMS, maintaining data integrity, reliability, and consistency even in complex and concurrent environments.


STORED PROCEDURES:
- to reference complex query
- its like functions in the programming language
syntax:

1)
delimiter //
create procedure employee_procedure()
begin
select id,name,age from employee
where gender = 'male' and age < 19;
end //

call employee_procedure()


2)

delimiter //
create procedure parameter_procedure(
	p_gender varchar(30),
	p_age int
)
begin
select id,name,age from employee
where gender = p_gender and age < p_age;
end //


call parameter_procedure('male',20)
call parameter_procedure('female',30)

Declare [variableName] dataType(size) [default values];
set variableName = value;

create procedure (procedure_name) ()
begin
declare count int default 0;
select count(*) into count from users;
select count;
end//

parameters 3 types
IN 
OUT
INOUT

create procedure countbylast(IN l_name varchar(255),OUT count_l int)
begin
select count(*) into count_l from users where last_name=l_name;
end//

call countbylast('Tiwari',@CountLast);
select @CountLast;

drop procedure (procedure_name);
show procedure status where db = 'learn' -->'(database_name)'

TRIGGERS:
-----------
- used mainly at the insert,update,delete
checks data,handles errors,auditing tables

syntax:

create trigger (trigger_name)
before/after update on (table_name)
for each row
set (col_name) = some condition;


-these trigger query automatically triigers the qury while any data is added in the 
table which is mentioned in the trigger query
- in the triggers we use the new/old keywords which are used in the set or condition
- new is used while any new data is come across the table
- old is used while to access the old data which is already exists in the table 


ex:
create trigger before_hourly_pay_update
before update on employees
for each row
set new.salary = (new.hourly_pay * 2080);


autocommit,commit,rollback:
------------------------
set AUTOCOMMIT = OFF; -->by default it is on
so while it is false the query is not saved untill we commit the changes
so error we will delete the entire table where we forgot about the where class
so at that time it is used

as ROLLBACK command is used to roll back the query operation and commit them



<<<<<<< HEAD









=======
>>>>>>> f538868f270bf191f39d65ca5805dd8ca3cf7b67
